import socketio
import time
import base64
import cv2
import os
import random
from datetime import datetime
from picamera2 import Picamera2
from PIL import Image
import io
# ‡∏™‡∏£‡πâ‡∏≤‡∏á Socket.IO client
sio = socketio.Client()

# URL ‡∏Ç‡∏≠‡∏á LPRServer
SERVER_URL = "http://lprserver.tail605477.ts.net:1337/"

# Flag ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
response_received = False
def compress_and_encode_image(image_path, max_size=(640, 480), quality=50):
    with Image.open(image_path) as img:
        img = img.convert('RGB')
        img.thumbnail(max_size)  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
        buffer = io.BytesIO()
        img.save(buffer, format='JPEG', quality=quality)  # ‡∏•‡∏î quality
        buffer.seek(0)
        img_bytes = buffer.read()
        return base64.b64encode(img_bytes).decode('utf-8')
def get_base64_size(base64_string):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î (byte) ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base64"""
    try:
        decoded_data = base64.b64decode(base64_string)
        return len(decoded_data)
    except Exception as e:
        print(f"‚ùå Error decoding base64: {e}")
        return 0
    
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ base64
def capture_image_b64():
    """
    ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á Picamera2 ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64

    Returns:
        tuple: (base64 string, ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û)
    """
    picam2 = Picamera2()
    picam2.configure(picam2.create_still_configuration())
    
    try:
        picam2.start()
        time.sleep(2)

        frame = picam2.capture_array()
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}")
        return None, None
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û    
        picam2.close()

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"plate_{timestamp}.jpg"

    _, buffer = cv2.imencode('.jpg', frame)
    image_b64 = base64.b64encode(buffer).decode('utf-8')
    size = get_base64_size(image_b64)
    print(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û base64 (‡∏´‡∏•‡∏±‡∏á decode): {size / 1024:.2f} KB")
    return image_b64, filename, buffer


def generate_mock_data():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á

    Returns:
        dict
    """
    return {
        "license_plate": f"TEST{random.randint(1000, 9999)}",
        "location_lat": round(random.uniform(18.7, 18.9), 6),
        "location_lon": round(random.uniform(98.9, 99.1), 6),
        "info": "Mock image from Raspberry Pi"
    }


# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
@sio.on('debug_response')
def on_response(data):
    global response_received
    print("üéØ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å server:")
    print(f"  data: {data}")

    response_received = True
    sio.disconnect() # ‡∏õ‡∏¥‡∏î socket ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
@sio.on('lpr_response')
def on_response(data):
    global response_received
    print("üéØ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å server:")
    print(f"  status: {data['status']}")
    print(f"  message: {data['message']}")
    print(f"  saved_path: {data.get('saved_path')}")

    response_received = True
    sio.disconnect() # ‡∏õ‡∏¥‡∏î socket ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response

def main():
    global response_received
    try:
        sio.connect(SERVER_URL, namespaces=['/'])
        if sio.get_sid() is None:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö session ID ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
            return
        else:
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à SID: {sio.get_sid()}")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {e}")
        return

    image_b64, filename , image_binary = capture_image_b64()
    if not image_b64 or not filename:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏û‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ base64 ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    mock_data = generate_mock_data()

    payload = {
        "license_plate": mock_data["license_plate"],
        "image_name": filename,
        #"image_b64": image_b64,
        "image_b64": image_binary, # ‡πÉ‡∏ä‡πâ binary ‡πÅ‡∏ó‡∏ô base64 ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        "location_lat": mock_data["location_lat"],
        "location_lon": mock_data["location_lon"],
        "info": mock_data["info"]
    }

    #sio.emit('debug_event', payload, binary=True)
    sio.emit('lpr_detection', payload)
    print("üì§ ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á server ‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö...")
    sio.wait()  # ‡∏£‡∏≠ event ‡∏Å‡πà‡∏≠‡∏ô disconnect

    # ‚úÖ ‡∏£‡∏≠ response 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ disconnect ‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    #timeout = 10
    #start = time.time()
    #while not response_received and time.time() - start < timeout:
    #    time.sleep(0.1)

    #if not response_received:
    #    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å server ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤")

if __name__ == "__main__":
    main()
